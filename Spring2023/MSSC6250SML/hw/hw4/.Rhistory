summary(Boston)
summary(Boston)
library(ISLR2)
summary(Boston)
train = sample(nrow(Boston), 0.8 * nrow(Boston))
test = -train
train = sample(nrow(Boston), 0.5 * nrow(Boston))
test = -train
train = sample(nrow(Boston), 0.8 * nrow(Boston))
test = -train
glm.fit = glm(crim ~ zn + nox + dis + rad + ptratio + black + medv,
data=Boston[train,], family="binomial")
Boston
view(Boston)
b <- Boston
View(b)
help(Boston)
glm.fit = glm(crim ~ zn + nox + dis + rad + ptratio + medv,
data=Boston[train,], family="binomial")
lm.fit <- lm(crim ~ zn + nox + dis + rad + ptratio + medv,
data = Boston[train,])
lm.fit <- lm(crim ~ zn + nox + dis + rad + ptratio + medv,
data = Boston[train,])
lm.prediction <- predict(lm.fit, newdata = Boston[test,])
lm.fit <- lm(crim ~ zn + nox + dis + rad + ptratio + medv,
data = Boston[train,])
lm.prediction <- predict(lm.fit, newdata = Boston[test,])
mse <- (Boston[train,]-lm.prediction)^2
lm.fit <- lm(crim ~ zn + nox + dis + rad + ptratio + medv,
data = Boston[train,])
lm.prediction <- predict(lm.fit, newdata = Boston[test,])
(mse <- mean((Boston[train,]-lm.prediction)^2))
lm.fit <- lm(crim ~ zn + nox + dis + rad + ptratio + medv,
data = Boston[train,])
lm.prediction <- predict(lm.fit, newdata = Boston[test,])
(mse <- (Boston[train,]-lm.prediction)^2)
lm.fit <- lm(crim ~ zn + nox + dis + rad + ptratio + medv,
data = Boston[train,])
lm.prediction <- predict(lm.fit, newdata = Boston[test,])
(mse <- (Boston[train,1]-lm.prediction)^2)
lm.fit <- lm(crim ~ zn + nox + dis + rad + ptratio + medv,
data = Boston[train,])
lm.prediction <- predict(lm.fit, newdata = Boston[test,])
(mse <- mean((Boston[train,1]-lm.prediction)^2))
len(Boston[train,1])
size(Boston[train,1])
dim(Boston[train,1])
Boston[train,1]
te<-Boston[train,1]
te<-Boston[test,1]
train <- sample(nrow(Boston), 0.8 * nrow(Boston))
test <- -train
lm.fit <- lm(crim ~ zn + nox + dis + rad + ptratio + medv,
data = Boston[train,])
lm.prediction <- predict(lm.fit, newdata = Boston[test,])
(mse <- mean((Boston[test,1]-lm.prediction)^2))
library(gbm)
install.packages("gbm")
library(gbm)
gbm.fit <- gbm::gbm(crim ~ zn + nox + dis + rad + ptratio + medv
, data = Boston[train],
distribution = "gaussian", n.trees = 300,
shrinkage = 0.5, bag.fraction = 0.8,
cv.folds = 10)
library(gbm)
gbm.fit <- gbm::gbm(crim ~ zn + nox + dis + rad + ptratio + medv
, data = Boston[train,],
distribution = "gaussian", n.trees = 300,
shrinkage = 0.5, bag.fraction = 0.8,
cv.folds = 10)
library(gbm)
gbm.fit <- gbm::gbm(crim ~ zn + nox + dis + rad + ptratio + medv
, data = Boston[train,],
distribution = "gaussian", n.trees = 300,
shrinkage = 0.5, bag.fraction = 0.8,
cv.folds = 10)
lm.prediction <- predict(gbm.fit, newdata = Boston[test,])
(mse <- mean((Boston[test,1]-lm.prediction)^2))
library(randomForest)
install.packages("randomForest")
library(randomForest)
library(randomForest)
bag.fit <- randomForest(crim ~ zn + nox + dis + rad + ptratio + medv,
data = Boston[train,])
train <- sample(nrow(Boston), 0.8 * nrow(Boston))
test <- -train
lm.fit <- lm(crim ~ zn + nox + dis + rad + ptratio + medv,
data = Boston[train,])
lm.prediction <- predict(lm.fit, newdata = Boston[test,])
(mse <- mean((Boston[test,1]-lm.prediction)^2))
library(gbm)
gbm.fit <- gbm::gbm(crim ~ zn + nox + dis + rad + ptratio + medv,
data = Boston[train,],
distribution = "gaussian", n.trees = 300,
shrinkage = 0.5, bag.fraction = 0.8,
cv.folds = 10)
gbm.prediction <- predict(gbm.fit, newdata = Boston[test,])
(mse <- mean((Boston[test,1]-lm.prediction)^2))
library(gbm)
gbm.fit <- gbm::gbm(crim ~ zn + nox + dis + rad + ptratio + medv,
data = Boston[train,],
distribution = "gaussian", n.trees = 300,
shrinkage = 0.5, bag.fraction = 0.8,
cv.folds = 10)
gbm.prediction <- predict(gbm.fit, newdata = Boston[test,])
(mse <- mean((Boston[test,1]-lm.prediction)^2))
set.seed(1)
library(ISLR2)
summary(Boston)
train <- sample(nrow(Boston), 0.8 * nrow(Boston))
test <- -train
lm.fit <- lm(crim ~ zn + nox + dis + rad + ptratio + medv,
data = Boston[train,])
lm.prediction <- predict(lm.fit, newdata = Boston[test,])
(mse <- mean((Boston[test,1]-lm.prediction)^2))
lm.fit <- lm(crim ~ zn + nox + dis + rad + ptratio + medv,
data = Boston[train,])
lm.prediction <- predict(lm.fit, newdata = Boston[test,])
(mse <- mean((Boston[test,1]-lm.prediction)^2))
lm.fit <- lm(crim ~ zn + nox + dis + rad + ptratio + medv,
data = Boston[train,])
lm.prediction <- predict(lm.fit, newdata = Boston[test,])
(mse <- mean((Boston[test,1]-lm.prediction)^2))
library(gbm)
gbm.fit <- gbm::gbm(crim ~ zn + nox + dis + rad + ptratio + medv,
data = Boston[train,],
distribution = "gaussian", n.trees = 300,
shrinkage = 0.5, bag.fraction = 0.8,
cv.folds = 10)
gbm.prediction <- predict(gbm.fit, newdata = Boston[test,])
(mse <- mean((Boston[test,1]-lm.prediction)^2))
library(gbm)
gbm.fit <- gbm::gbm(crim ~ zn + nox + dis + rad + ptratio + medv,
data = Boston[train,],
distribution = "gaussian", n.trees = 300,
shrinkage = 0.5, bag.fraction = 0.8,
cv.folds = 10)
gbm.prediction <- predict(gbm.fit, newdata = Boston[test,])
(mse <- mean((Boston[test,1]-lm.prediction)^2))
library(gbm)
gbm.fit <- gbm::gbm(crim ~ zn + nox + dis + rad + ptratio + medv,
data = Boston[train,],
distribution = "gaussian", n.trees = 300,
shrinkage = 0.5, bag.fraction = 0.8,
cv.folds = 10)
gbm.prediction <- predict(gbm.fit, newdata = Boston[test,])
(mse <- mean((Boston[test,1]-gbm.prediction)^2))
library(gbm)
gbm.fit <- gbm::gbm(crim ~ zn + nox + dis + rad + ptratio + medv,
data = Boston[train,],
distribution = "gaussian", n.trees = 300,
shrinkage = 0.5, bag.fraction = 0.8,
cv.folds = 10)
gbm.prediction <- predict(gbm.fit, newdata = Boston[test,])
(mse <- mean((Boston[test,1]-gbm.prediction)^2))
library(randomForest)
bag.fit <- randomForest(crim ~ zn + nox + dis + rad + ptratio + medv,
data = Boston[train,])
bag.prediction <- predict(bag.fit, newdata = Boston[test,])
(mse <- mean((Boston[test,1]-bag.prediction)^2))
library(randomForest)
bag.fit <- randomForest(crim ~ zn + nox + dis + rad + ptratio + medv,
data = Boston[train,])
bag.prediction <- predict(bag.fit, newdata = Boston[test,])
(mse <- mean((Boston[test,1]-bag.prediction)^2))
library(randomForest)
bag.fit <- randomForest(crim ~ zn + nox + dis + rad + ptratio + medv,
data = Boston[train,])
bag.prediction <- predict(bag.fit, newdata = Boston[test,])
(mse <- mean((Boston[test,1]-bag.prediction)^2))
library(randomForest)
bag.fit <- randomForest(crim ~ zn + nox + dis + rad + ptratio + medv,
data = Boston[train,])
bag.prediction <- predict(bag.fit, newdata = Boston[test,])
(mse <- mean((Boston[test,1]-bag.prediction)^2))
library(gbm)
gbm.fit <- gbm::gbm(crim ~ zn + nox + dis + rad + ptratio + medv,
data = Boston[train,],
distribution = "gaussian", n.trees = 300,
shrinkage = 0.5, bag.fraction = 0.8,
cv.folds = 10)
gbm.prediction <- predict(gbm.fit, newdata = Boston[test,])
(mse <- mean((Boston[test,1]-gbm.prediction)^2))
library(gbm)
gbm.fit <- gbm::gbm(crim ~ zn + nox + dis + rad + ptratio + medv,
data = Boston[train,],
distribution = "gaussian", n.trees = 300,
shrinkage = 0.5, bag.fraction = 0.8,
cv.folds = 10)
gbm.prediction <- predict(gbm.fit, newdata = Boston[test,])
(mse <- mean((Boston[test,1]-gbm.prediction)^2))
library(randomForest)
bag.fit <- randomForest(crim ~ zn + nox + dis + rad + ptratio + medv,
data = Boston[train,])
bag.prediction <- predict(bag.fit, newdata = Boston[test,])
(mse <- mean((Boston[test,1]-bag.prediction)^2))
library(randomForest)
bag.fit <- randomForest(crim ~ zn + nox + dis + rad + ptratio + medv,
data = Boston[train,],
mtry = 10)
bag.prediction <- predict(bag.fit, newdata = Boston[test,])
(mse <- mean((Boston[test,1]-bag.prediction)^2))
library(randomForest)
bag.fit <- randomForest(crim ~ zn + nox + dis + rad + ptratio + medv,
data = Boston[train,],
mtry = 13)
bag.prediction <- predict(bag.fit, newdata = Boston[test,])
(mse <- mean((Boston[test,1]-bag.prediction)^2))
library(randomForest)
bag.fit <- randomForest(crim ~ zn + nox + dis + rad + ptratio + medv,
data = Boston[train,],
mtry = 6)
bag.prediction <- predict(bag.fit, newdata = Boston[test,])
(mse <- mean((Boston[test,1]-bag.prediction)^2))
library(randomForest)
bag.fit <- randomForest(crim ~ zn + nox + dis + rad + ptratio + medv,
data = Boston[train,],
mtry = 7)
bag.prediction <- predict(bag.fit, newdata = Boston[test,])
(mse <- mean((Boston[test,1]-bag.prediction)^2))
library(randomForest)
bag.fit <- randomForest(crim ~ zn + nox + dis + rad + ptratio + medv,
data = Boston[train,],
mtry = 8)
bag.prediction <- predict(bag.fit, newdata = Boston[test,])
(mse <- mean((Boston[test,1]-bag.prediction)^2))
library(randomForest)
bag.fit <- randomForest(crim ~ zn + nox + dis + rad + ptratio + medv,
data = Boston[train,],
mtry = 12)
bag.prediction <- predict(bag.fit, newdata = Boston[test,])
(mse <- mean((Boston[test,1]-bag.prediction)^2))
library(randomForest)
bag.fit <- randomForest(crim ~ zn + nox + dis + rad + ptratio + medv,
data = Boston[train,],
mtry = 6)
bag.prediction <- predict(bag.fit, newdata = Boston[test,])
(mse <- mean((Boston[test,1]-bag.prediction)^2))
library(randomForest)
bag.fit <- randomForest(crim ~ zn + nox + dis + rad + ptratio + medv,
data = Boston[train,],
mtry = 6)
bag.prediction <- predict(bag.fit, newdata = Boston[test,])
(mse <- mean((Boston[test,1]-bag.prediction)^2))
library(randomForest)
bag.fit <- randomForest(crim ~ zn + nox + dis + rad + ptratio + medv,
data = Boston[train,],
mtry = 6)
bag.prediction <- predict(bag.fit, newdata = Boston[test,])
(mse <- mean((Boston[test,1]-bag.prediction)^2))
library(randomForest)
bag.fit <- randomForest(crim ~ zn + nox + dis + rad + ptratio + medv,
data = Boston[train,],
mtry = 5)
bag.prediction <- predict(bag.fit, newdata = Boston[test,])
(mse <- mean((Boston[test,1]-bag.prediction)^2))
library(randomForest)
bag.fit <- randomForest(crim ~ zn + nox + dis + rad + ptratio + medv,
data = Boston[train,],
mtry = 5)
bag.prediction <- predict(bag.fit, newdata = Boston[test,])
(mse <- mean((Boston[test,1]-bag.prediction)^2))
rngF.fit <- randomForest(crim ~ zn + nox + dis + rad + ptratio + medv,
data = Boston[train,],
mtry = 2)
rngF.prediction <- predict(rngF.fit, newdata = Boston[test,])
(mse <- mean((Boston[test,1]-rngF.prediction)^2))
rngF.fit <- randomForest(crim ~ zn + nox + dis + rad + ptratio + medv,
data = Boston[train,],
mtry = 2)
rngF.prediction <- predict(rngF.fit, newdata = Boston[test,])
(mse <- mean((Boston[test,1]-rngF.prediction)^2))
rngF.fit <- randomForest(crim ~ zn + nox + dis + rad + ptratio + medv,
data = Boston[train,],
mtry = 2)
rngF.prediction <- predict(rngF.fit, newdata = Boston[test,])
(mse <- mean((Boston[test,1]-rngF.prediction)^2))
rngF.fit <- randomForest(crim ~ zn + nox + dis + rad + ptratio + medv,
data = Boston[train,],
mtry = 2)
rngF.prediction <- predict(rngF.fit, newdata = Boston[test,])
(mse <- mean((Boston[test,1]-rngF.prediction)^2))
rngF.fit <- randomForest(crim ~ zn + nox + dis + rad + ptratio + medv,
data = Boston[train,],
mtry = 2)
rngF.prediction <- predict(rngF.fit, newdata = Boston[test,])
(mse <- mean((Boston[test,1]-rngF.prediction)^2))
rngF.fit <- randomForest(crim ~ zn + nox + dis + rad + ptratio + medv,
data = Boston[train,],
mtry = 2)
rngF.prediction <- predict(rngF.fit, newdata = Boston[test,])
(mse <- mean((Boston[test,1]-rngF.prediction)^2))
rngF.fit <- randomForest(crim ~ zn + nox + dis + rad + ptratio + medv,
data = Boston[train,],
mtry = 2)
rngF.prediction <- predict(rngF.fit, newdata = Boston[test,])
(mse <- mean((Boston[test,1]-rngF.prediction)^2))
x1 = c(3,2,4,1,2,4,4)
x2 = c(4,2,4,4,1,3,1)
colors = c("red", "red", "red", "red", "blue", "blue", "blue")
plot(x1,x2,col=colors)
x1 = c(3,2,4,1,2,4,4)
x2 = c(4,2,4,4,1,3,1)
colors = c("red", "red", "red", "red", "blue", "blue", "blue")
plot(x1,x2,col=colors,pty=2)
x1 = c(3,2,4,1,2,4,4)
x2 = c(4,2,4,4,1,3,1)
colors = c("red", "red", "red", "red", "blue", "blue", "blue")
plot(x1,x2,col=colors,pty=4)
x1 = c(3,2,4,1,2,4,4)
x2 = c(4,2,4,4,1,3,1)
colors = c("red", "red", "red", "red", "blue", "blue", "blue")
plot(x1,x2,col=colors,pty=4)
plot(x1,x2,col=colors,pch=4)
plot(x1,x2,col=colors,pch=2)
plot(x1,x2,col=colors,pch=1)
plot(x1,x2,col=colors,pch=19)
plot(x1,x2,col=colors)
x1 = c(3,2,4,1,2,4,4)
x2 = c(4,2,4,4,1,3,1)
colors = c("red", "red", "red", "red", "blue", "blue", "blue")
plot(x1,x2,col=colors,pch=19)
plot(x1,x2,col=colors)
abline(-0.5, 1)
plot(x1,x2,col=colors,pch=19)
abline(-0.5, 1)
plot(x1,x2,col=colors,pch=19)
abline(-0.5, 1)
abline(-1, 1, lty=2)
abline(0, 1, lty=2)

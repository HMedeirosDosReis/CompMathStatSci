pred_prob_logit_mpg <- predict(logit_fit_mpg, newdata = test1,
type = "response")
pred_prob_logit_mpg[pred_prob_logit_mpg>0.5]<-1
pred_prob_logit_mpg[pred_prob_logit_mpg<0.5]<-0
res_logit <- table(pred_prob_logit_mpg, test1$mpg01)
correct_logit <- res_logit[1,1]+res_logit[2,2]
total_logit <- sum(res_logit)
1-correct_logit/total_logit
mpg01 = rep(0, length(Auto$mpg))
mpg01[Auto$mpg>median(Auto$mpg)] = 1
Auto = data.frame(Auto, mpg01)
pairs(Auto)
logit_fit_mpg <- glm(mpg01~cylinders+weight+displacement
+horsepower,
data = train1, family = "binomial")
index <- caret::createDataPartition(y = Auto$mpg01, p = 0.8, list = F)
train1 <- Auto[index, ]
test1 <- Auto[-index, ]
logit_fit_mpg <- glm(mpg01~cylinders+weight+displacement
+horsepower,
data = train1, family = "binomial")
pred_prob_logit_mpg <- predict(logit_fit_mpg, newdata = test1,
type = "response")
pred_prob_logit_mpg[pred_prob_logit_mpg>0.5]<-1
pred_prob_logit_mpg[pred_prob_logit_mpg<0.5]<-0
res_logit <- table(pred_prob_logit_mpg, test1$mpg01)
correct_logit <- res_logit[1,1]+res_logit[2,2]
total_logit <- sum(res_logit)
1-correct_logit/total_logit
b_df <- Boston
#Add 1 to column if CRIM > median and 0 otherwise
median_crim <- median(Boston$crim)
b_df$crim01 <- with(ifelse(crim>median_crim, 1, 0), data=Boston)
b_sample <- caret::createDataPartition(b_df$crim01, p = 0.8, list = F)
b_train <- b_df[index,]
b_test <- b_df[-index,]
logit_fit_boston <- glm(crim01 ~.-chas-crim,
data = b_train, family = "binomial")
pred_prob_logit_boston <- predict(logit_fit_boston, newdata = b_test,
type = "response")
pred_prob_logit_boston[pred_prob_logit_boston>0.5]<-1
pred_prob_logit_boston[pred_prob_logit_boston<0.5]<-0
res_logit_b <- table(pred_prob_logit_boston, b_test$crim01)
correct_logit_b <- res_logit_b[1,1]+res_logit_b[2,2]
total_logit_b <- sum(res_logit_b)
1-correct_logit_b/total_logit_b
nb_fit_boston <- e1071::naiveBayes(crim01 ~.-chas-crim,
data = b_train, family = "binomial")
pred_prob_nb_boston <- predict(nb_fit_boston,b_test)
res_nb_boston <- table(pred_prob_nb_boston, b_test$crim01)
correct_nb_boston <- res_nb_boston[1,1]+res_nb_boston[2,2]
total_nb_boston <- sum(res_nb_boston)
1-correct_nb_boston/total_nb_boston
b_train_m = data.matrix(subset(b_train,select=-c(crim,chas)))
b_test_m = data.matrix(subset(b_test,select=-c(crim,chas)))
train_y = data.matrix(b_train[,15])
b_train
View(b_train)
b_train_m = data.matrix(subset(b_train,select=-c(crim,chas)))
b_test_m = data.matrix(subset(b_test,select=-c(crim,chas)))
train_y = data.matrix(b_train[,14])
test_y = data.matrix(b_test[,14])
train_y
predicted_knn_boston1 <- class::knn(b_train_m,
test = b_test_m,
cl = train_y,
k = 1,
prob = T)
res_knn_b1 <- table(predicted_knn_boston1, test_y)
correct_knn_b1 <- res_knn_b1[1,1]+res_knn_b1[2,2]
total_knn_b1 <- sum(res_knn_b1)
1-correct_knn_b1/total_knn_b1
predicted_knn_boston3 <- class::knn(b_train_m,
test = b_test_m,
cl = train_y,
k = 3,
prob = T)
res_knn_b3 <- table(predicted_knn_boston1, test_y)
correct_knn_b3 <- res_knn_b3[1,1]+res_knn_b3[2,2]
total_knn_b3 <- sum(res_knn_b3)
1-correct_knn_b3/total_knn_b3
predicted_knn_boston3 <- class::knn(b_train_m,
test = b_test_m,
cl = train_y,
k = 5,
prob = T)
res_knn_b3 <- table(predicted_knn_boston1, test_y)
correct_knn_b3 <- res_knn_b3[1,1]+res_knn_b3[2,2]
total_knn_b3 <- sum(res_knn_b3)
1-correct_knn_b3/total_knn_b3
predicted_knn_boston3 <- class::knn(b_train_m,
test = b_test_m,
cl = train_y,
k = 3,
prob = T)
res_knn_b3 <- table(predicted_knn_boston3, test_y)
correct_knn_b3 <- res_knn_b3[1,1]+res_knn_b3[2,2]
total_knn_b3 <- sum(res_knn_b3)
1-correct_knn_b3/total_knn_b3
predicted_knn_boston3 <- class::knn(b_train_m,
test = b_test_m,
cl = train_y,
k = 5,
prob = T)
res_knn_b3 <- table(predicted_knn_boston3, test_y)
correct_knn_b3 <- res_knn_b3[1,1]+res_knn_b3[2,2]
total_knn_b3 <- sum(res_knn_b3)
1-correct_knn_b3/total_knn_b3
predicted_knn_boston3 <- class::knn(b_train_m,
test = b_test_m,
cl = train_y,
k = 3,
prob = T)
res_knn_b3 <- table(predicted_knn_boston3, test_y)
correct_knn_b3 <- res_knn_b3[1,1]+res_knn_b3[2,2]
total_knn_b3 <- sum(res_knn_b3)
1-correct_knn_b3/total_knn_b3
predicted_knn_boston5 <- class::knn(b_train_m,
test = b_test_m,
cl = train_y,
k = 5,
prob = T)
res_knn_b5 <- table(predicted_knn_boston3, test_y)
correct_knn_b5 <- res_knn_b5[1,1]+res_knn_b5[2,2]
total_knn_b5<- sum(res_knn_b5)
1-correct_knn_b5/total_knn_b5
predicted_knn_boston5 <- class::knn(b_train_m,
test = b_test_m,
cl = train_y,
k = 5,
prob = T)
res_knn_b5 <- table(predicted_knn_boston5, test_y)
correct_knn_b5 <- res_knn_b5[1,1]+res_knn_b5[2,2]
total_knn_b5<- sum(res_knn_b5)
1-correct_knn_b5/total_knn_b5
predicted_knn_boston10 <- class::knn(b_train_m,
test = b_test_m,
cl = train_y,
k = 10,
prob = T)
res_knn_b10 <- table(predicted_knn_boston10, test_y)
correct_knn_b10 <- res_knn_b10[1,1]+res_knn_b10[2,2]
total_knn_b10<- sum(res_knn_b10)
1-correct_knn_b10/total_knn_b10
library(ISLR2)
head(Weekly)
cor(Weekly[ ,-9])
summary(Weekly)
logit_fit = glm(Direction ~ Lag1+Lag2+Lag3+Lag4+Lag5+Volume,
data=Weekly, family=binomial)
summary(logit_fit)
pred_prob <- predict(logit_fit, type = "response")
(res<-table(pred_prob > 0.5, Weekly$Direction))
correct <- res[1,1]+res[2,2]
total <- sum(res)
correct/total
train <- Weekly[Weekly$Year <= 2008, ]
test <- Weekly[Weekly$Year > 2008, ]
logit_fit_lag2 <- glm(Direction ~ Lag2, data = train, family = "binomial")
pred_prob <- factor(ifelse(
predict(logit_fit_lag2, newdata = test, type = "response") < 0.5, "Down", "Up"))
caret::confusionMatrix(pred_prob, test$Direction, positive = "Up")
lda_fit_lag2 <- MASS::lda(Direction ~ Lag2, data = train, family = "binomial")
pred_prob_lda <- predict(lda_fit_lag2, newdata = test, type = "response")
caret::confusionMatrix(data=pred_prob_lda$class, test$Direction, positive = "Up")
qda_fit_lag2 <- MASS::qda(Direction ~ Lag2, data = train, family = "binomial")
pred_prob_qda <- predict(qda_fit_lag2, newdata = test, type = "response")
caret::confusionMatrix(data=pred_prob_qda$class, test$Direction, positive = "Up")
set.seed(1)
predicted_knn <- class::knn(train = data.frame(Lag2 = train$Lag2),
test = data.frame(Lag2 = test$Lag2),
cl = train$Direction,
k = 1,
prob = T)
caret::confusionMatrix(data = predicted_knn,
reference = test$Direction,
positive = "Up")
nb_fit <- e1071::naiveBayes(Direction~Lag2 ,data=train)
nb_pred <- predict(nb_fit, test)
caret::confusionMatrix(data = nb_pred,
reference = test$Direction,
positive = "Up")
predicted_knn6 <- class::knn(train = data.frame(Lag2 = train$Lag2),
test = data.frame(Lag2 = test$Lag2),
cl = train$Direction,
k = 6,
prob = T)
cm <- caret::confusionMatrix(data = predicted_knn6,
reference = test$Direction,
positive = "Up")
cm$overall[1]
predicted_knn9 <- class::knn(train = data.frame(Lag2 = train$Lag2),
test = data.frame(Lag2 = test$Lag2),
cl = train$Direction,
k = 9,
prob = T)
cm <- caret::confusionMatrix(data = predicted_knn9,
reference = test$Direction,
positive = "Up")
cm$overall[1]
predicted_knn15 <- class::knn(train = data.frame(Lag2 = train$Lag2),
test = data.frame(Lag2 = test$Lag2),
cl = train$Direction,
k = 15,
prob = T)
cm <- caret::confusionMatrix(data = predicted_knn15,
reference = test$Direction,
positive = "Up")
cm$overall[1]
mpg01 = rep(0, length(Auto$mpg))
mpg01[Auto$mpg>median(Auto$mpg)] = 1
Auto = data.frame(Auto, mpg01)
pairs(Auto)
index <- caret::createDataPartition(y = Auto$mpg01, p = 0.8, list = F)
train1 <- Auto[index, ]
test1 <- Auto[-index, ]
lda_fit_mpg <- MASS::lda(mpg01~cylinders+weight+displacement
+horsepower,
data = train1, family = "binomial")
pred_prob_lda_mpg <- predict(lda_fit_mpg, newdata = test1,
type = "response")
res1 <- table(pred_prob_lda_mpg$class, test1$mpg01)
correct <- res1[1,1]+res1[2,2]
total <- sum(res1)
1-correct/total
qda_fit_mpg <- MASS::qda(mpg01~cylinders+weight+displacement
+horsepower,
data = train1, family = "binomial")
pred_prob_qda_mpg <- predict(qda_fit_mpg, newdata = test1,
type = "response")
res_qda <- table(pred_prob_qda_mpg$class, test1$mpg01)
correct_qda <- res_qda[1,1]+res_qda[2,2]
total_qda <- sum(res_qda)
1-correct_qda/total_qda
logit_fit_mpg <- glm(mpg01~cylinders+weight+displacement
+horsepower,
data = train1, family = "binomial")
pred_prob_logit_mpg <- predict(logit_fit_mpg, newdata = test1,
type = "response")
pred_prob_logit_mpg[pred_prob_logit_mpg>0.5]<-1
pred_prob_logit_mpg[pred_prob_logit_mpg<0.5]<-0
res_logit <- table(pred_prob_logit_mpg, test1$mpg01)
correct_logit <- res_logit[1,1]+res_logit[2,2]
total_logit <- sum(res_logit)
1-correct_logit/total_logit
nb_fit_mpg <- e1071::naiveBayes(mpg01~cylinders+weight
+displacement+horsepower,
data = train1, family = "binomial")
pred_prob_nb_mpg <- predict(nb_fit_mpg,test1)
res_nb <- table(pred_prob_nb_mpg, test1$mpg01)
correct_nb <- res_nb[1,1]+res_nb[2,2]
total_nb <- sum(res_nb)
1-correct_nb/total_nb
tr1_matrix = data.matrix(train1[,c("cylinders","displacement",
"weight","horsepower")])
te1_matrix = data.matrix(test1[,c("cylinders","displacement",
"weight","horsepower")])
tr1_y = data.matrix(train1$mpg01)
te1_y = data.matrix(test1$mpg01)
predicted_knn_mpg1 <- class::knn(tr1_matrix,
test = te1_matrix,
cl = tr1_y,
k = 1,
prob = T)
res_knn1 <- table(predicted_knn_mpg1, te1_y)
correct_knn1 <- res_knn1[1,1]+res_knn1[2,2]
total_knn1 <- sum(res_knn1)
1-correct_knn1/total_knn1
predicted_knn_mpg5 <- class::knn(tr1_matrix,
test = te1_matrix,
cl = tr1_y,
k = 5,
prob = T)
res_knn5 <- table(predicted_knn_mpg5, te1_y)
correct_knn5 <- res_knn5[1,1]+res_knn5[2,2]
total_knn5 <- sum(res_knn5)
1-correct_knn5/total_knn5
predicted_knn_mpg15 <- class::knn(tr1_matrix,
test = te1_matrix,
cl = tr1_y,
k = 15,
prob = T)
res_knn15 <- table(predicted_knn_mpg15, te1_y)
correct_knn15 <- res_knn15[1,1]+res_knn15[2,2]
total_knn15 <- sum(res_knn15)
1-correct_knn15/total_knn15
predicted_knn_mpg10 <- class::knn(tr1_matrix,
test = te1_matrix,
cl = tr1_y,
k = 10,
prob = T)
res_knn10 <- table(predicted_knn_mpg10, te1_y)
correct_knn10<- res_knn10[1,1]+res_knn10[2,2]
total_knn10 <- sum(res_knn10)
1-correct_knn10/total_knn10
b_df <- Boston
#Add 1 to column if CRIM > median and 0 otherwise
median_crim <- median(Boston$crim)
b_df$crim01 <- with(ifelse(crim>median_crim, 1, 0), data=Boston)
pairs(b_df)
cor(b_df$crim01,b_df)
b_sample <- caret::createDataPartition(b_df$crim01, p = 0.8, list = F)
b_train <- b_df[index,]
b_test <- b_df[-index,]
lda_fit_boston <- MASS::lda(crim01 ~.-chas-crim,
data = b_train, family = "binomial")
pred_prob_lda_boston <- predict(lda_fit_boston, newdata = b_test,
type = "response")
res_b_lda <- table(pred_prob_lda_boston$class, b_test$crim01)
correct_b_lda <- res_b_lda[1,1]+res_b_lda[2,2]
total_b_lda <- sum(res_b_lda)
1-correct_b_lda/total_b_lda
qda_fit_boston <- MASS::qda(crim01 ~.-chas-crim,
data = b_train, family = "binomial")
pred_prob_qda_boston <- predict(qda_fit_boston, newdata = b_test,
type = "response")
res_b_qda <- table(pred_prob_qda_boston$class, b_test$crim01)
correct_b_qda <- res_b_qda[1,1]+res_b_qda[2,2]
total_b_qda <- sum(res_b_qda)
1-correct_b_qda/total_b_qda
logit_fit_boston <- glm(crim01 ~.-chas-crim,
data = b_train, family = "binomial")
pred_prob_logit_boston <- predict(logit_fit_boston, newdata = b_test,
type = "response")
pred_prob_logit_boston[pred_prob_logit_boston>0.5]<-1
pred_prob_logit_boston[pred_prob_logit_boston<0.5]<-0
res_logit_b <- table(pred_prob_logit_boston, b_test$crim01)
correct_logit_b <- res_logit_b[1,1]+res_logit_b[2,2]
total_logit_b <- sum(res_logit_b)
1-correct_logit_b/total_logit_b
nb_fit_boston <- e1071::naiveBayes(crim01 ~.-chas-crim,
data = b_train, family = "binomial")
pred_prob_nb_boston <- predict(nb_fit_boston,b_test)
res_nb_boston <- table(pred_prob_nb_boston, b_test$crim01)
correct_nb_boston <- res_nb_boston[1,1]+res_nb_boston[2,2]
total_nb_boston <- sum(res_nb_boston)
1-correct_nb_boston/total_nb_boston
b_train_m = data.matrix(subset(b_train,select=-c(crim,chas)))
b_test_m = data.matrix(subset(b_test,select=-c(crim,chas)))
train_y = data.matrix(b_train[,14])
test_y = data.matrix(b_test[,14])
predicted_knn_boston1 <- class::knn(b_train_m,
test = b_test_m,
cl = train_y,
k = 1,
prob = T)
res_knn_b1 <- table(predicted_knn_boston1, test_y)
correct_knn_b1 <- res_knn_b1[1,1]+res_knn_b1[2,2]
total_knn_b1 <- sum(res_knn_b1)
1-correct_knn_b1/total_knn_b1
predicted_knn_boston3 <- class::knn(b_train_m,
test = b_test_m,
cl = train_y,
k = 3,
prob = T)
res_knn_b3 <- table(predicted_knn_boston3, test_y)
correct_knn_b3 <- res_knn_b3[1,1]+res_knn_b3[2,2]
total_knn_b3 <- sum(res_knn_b3)
1-correct_knn_b3/total_knn_b3
predicted_knn_boston5 <- class::knn(b_train_m,
test = b_test_m,
cl = train_y,
k = 5,
prob = T)
res_knn_b5 <- table(predicted_knn_boston5, test_y)
correct_knn_b5 <- res_knn_b5[1,1]+res_knn_b5[2,2]
total_knn_b5<- sum(res_knn_b5)
1-correct_knn_b5/total_knn_b5
predicted_knn_boston10 <- class::knn(b_train_m,
test = b_test_m,
cl = train_y,
k = 10,
prob = T)
res_knn_b10 <- table(predicted_knn_boston10, test_y)
correct_knn_b10 <- res_knn_b10[1,1]+res_knn_b10[2,2]
total_knn_b10<- sum(res_knn_b10)
1-correct_knn_b10/total_knn_b10
predicted_knn_boston5 <- class::knn(b_train_m,
test = b_test_m,
cl = train_y,
k = 6,
prob = T)
res_knn_b5 <- table(predicted_knn_boston5, test_y)
correct_knn_b5 <- res_knn_b5[1,1]+res_knn_b5[2,2]
total_knn_b5<- sum(res_knn_b5)
1-correct_knn_b5/total_knn_b5
predicted_knn_boston5 <- class::knn(b_train_m,
test = b_test_m,
cl = train_y,
k = 5,
prob = T)
res_knn_b5 <- table(predicted_knn_boston5, test_y)
correct_knn_b5 <- res_knn_b5[1,1]+res_knn_b5[2,2]
total_knn_b5<- sum(res_knn_b5)
1-correct_knn_b5/total_knn_b5
predicted_knn_boston6 <- class::knn(b_train_m,
test = b_test_m,
cl = train_y,
k = 6,
prob = T)
res_knn_b6 <- table(predicted_knn_boston6, test_y)
correct_knn_b6 <- res_knn_b6[1,1]+res_knn_b6[2,2]
total_knn_b6<- sum(res_knn_b6)
1-correct_knn_b6/total_knn_b6
predicted_knn_boston5 <- class::knn(b_train_m,
test = b_test_m,
cl = train_y,
k = 5,
prob = T)
res_knn_b5 <- table(predicted_knn_boston5, test_y)
correct_knn_b5 <- res_knn_b5[1,1]+res_knn_b5[2,2]
total_knn_b5<- sum(res_knn_b5)
1-correct_knn_b5/total_knn_b5
predicted_knn_boston6 <- class::knn(b_train_m,
test = b_test_m,
cl = train_y,
k = 7,
prob = T)
res_knn_b6 <- table(predicted_knn_boston6, test_y)
correct_knn_b6 <- res_knn_b6[1,1]+res_knn_b6[2,2]
total_knn_b6<- sum(res_knn_b6)
1-correct_knn_b6/total_knn_b6
predicted_knn_boston6 <- class::knn(b_train_m,
test = b_test_m,
cl = train_y,
k = 4,
prob = T)
res_knn_b6 <- table(predicted_knn_boston6, test_y)
correct_knn_b6 <- res_knn_b6[1,1]+res_knn_b6[2,2]
total_knn_b6<- sum(res_knn_b6)
1-correct_knn_b6/total_knn_b6
predicted_knn_boston6 <- class::knn(b_train_m,
test = b_test_m,
cl = train_y,
k = 7,
prob = T)
res_knn_b6 <- table(predicted_knn_boston6, test_y)
correct_knn_b6 <- res_knn_b6[1,1]+res_knn_b6[2,2]
total_knn_b6<- sum(res_knn_b6)
1-correct_knn_b6/total_knn_b6
predicted_knn_boston6 <- class::knn(b_train_m,
test = b_test_m,
cl = train_y,
k = 8,
prob = T)
res_knn_b6 <- table(predicted_knn_boston6, test_y)
correct_knn_b6 <- res_knn_b6[1,1]+res_knn_b6[2,2]
total_knn_b6<- sum(res_knn_b6)
1-correct_knn_b6/total_knn_b6
predicted_knn_boston6 <- class::knn(b_train_m,
test = b_test_m,
cl = train_y,
k = 90,
prob = T)
res_knn_b6 <- table(predicted_knn_boston6, test_y)
correct_knn_b6 <- res_knn_b6[1,1]+res_knn_b6[2,2]
total_knn_b6<- sum(res_knn_b6)
1-correct_knn_b6/total_knn_b6
predicted_knn_boston6 <- class::knn(b_train_m,
test = b_test_m,
cl = train_y,
k = 4,
prob = T)
res_knn_b6 <- table(predicted_knn_boston6, test_y)
correct_knn_b6 <- res_knn_b6[1,1]+res_knn_b6[2,2]
total_knn_b6<- sum(res_knn_b6)
1-correct_knn_b6/total_knn_b6
predicted_knn_boston4 <- class::knn(b_train_m,
test = b_test_m,
cl = train_y,
k = 4,
prob = T)
res_knn_b4 <- table(predicted_knn_boston4, test_y)
correct_knn_b4 <- res_knn_b4[1,1]+res_knn_b4[2,2]
total_knn_b4<- sum(res_knn_b4)
1-correct_knn_b4/total_knn_b4
predicted_knn_boston4 <- class::knn(b_train_m,
test = b_test_m,
cl = train_y,
k = 4,
prob = T)
res_knn_b4 <- table(predicted_knn_boston4, test_y)
correct_knn_b4 <- res_knn_b4[1,1]+res_knn_b4[2,2]
total_knn_b4<- sum(res_knn_b4)
1-correct_knn_b4/total_knn_b4
predicted_knn_boston4 <- class::knn(b_train_m,
test = b_test_m,
cl = train_y,
k = 7,
prob = T)
res_knn_b4 <- table(predicted_knn_boston4, test_y)
correct_knn_b4 <- res_knn_b4[1,1]+res_knn_b4[2,2]
total_knn_b4<- sum(res_knn_b4)
1-correct_knn_b4/total_knn_b4
predicted_knn_boston5 <- class::knn(b_train_m,
test = b_test_m,
cl = train_y,
k = 5,
prob = T)
res_knn_b5 <- table(predicted_knn_boston5, test_y)
correct_knn_b5 <- res_knn_b5[1,1]+res_knn_b5[2,2]
total_knn_b5<- sum(res_knn_b5)
1-correct_knn_b5/total_knn_b5
predicted_knn_boston10 <- class::knn(b_train_m,
test = b_test_m,
cl = train_y,
k = 10,
prob = T)
res_knn_b10 <- table(predicted_knn_boston10, test_y)
correct_knn_b10 <- res_knn_b10[1,1]+res_knn_b10[2,2]
total_knn_b10<- sum(res_knn_b10)
1-correct_knn_b10/total_knn_b10
